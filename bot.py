import telegram
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler
import requests
from bs4 import BeautifulSoup
import random

TOKEN = ''

GAME, PLATFORM, ROLE = range(3)

teammate_requests = {}

guides = {
    "Dota 2": ["–ö–∞–∫ —Ñ–∞—Ä–º–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ", "–ì–∞–π–¥ –ø–æ –≥–µ—Ä–æ—é Invoker"],
    "CS:GO": ["–¢–∞–∫—Ç–∏–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ Mirage", "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏"],
    "Valorant": ["–ö–∞–∫ –∏–≥—Ä–∞—Ç—å –∑–∞ –∞–≥–µ–Ω—Ç–∞ Jett", "–†–∞—Å–∫–∏–¥–∫–∏ –≥—Ä–∞–Ω–∞—Ç –Ω–∞ Haven"],
}

def get_game_news(update, context):
    try:
        url = "https://www.igromania.ru/news/"
        response = requests.get(url)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')
        news_items = soup.find_all('div', class_='aubli_item')[:5]
        news_text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
        for item in news_items:
            title_element = item.find('a', class_='aubli_name')
            link_element = title_element['href']
            title = title_element.text.strip()
            news_text += f"[{title}]({link_element})\n"
        update.message.reply_text(news_text, parse_mode=telegram.ParseMode.MARKDOWN)
    except requests.exceptions.RequestException as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
    except Exception as e:
        update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def find_teammates_start(update, context):
    update.message.reply_text("üéÆ –í –∫–∞–∫—É—é –∏–≥—Ä—É –≤—ã –∏—â–µ—Ç–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤?")
    return GAME

def game_input(update, context):
    context.user_data['game'] = update.message.text
    update.message.reply_text("üïπÔ∏è –ù–∞ –∫–∞–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ? (PC, PS, Xbox –∏ —Ç.–¥.)")
    return PLATFORM

def platform_input(update, context):
    context.user_data['platform'] = update.message.text
    update.message.reply_text("üéØ –ö–∞–∫–∏–µ —Ä–æ–ª–∏ –∏–ª–∏ –∑–∞–¥–∞—á–∏ –≤–∞–º –Ω—É–∂–Ω—ã –≤ –∫–æ–º–∞–Ω–¥–µ?")
    return ROLE

def role_input(update, context):
    context.user_data['role'] = update.message.text
    game = context.user_data['game']
    platform = context.user_data['platform']
    role = context.user_data['role']

    user_id = update.message.from_user.id
    teammate_requests[user_id] = context.user_data

    update.message.reply_text(
        f"üîé –í—ã –∏—â–µ—Ç–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã {game} –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {platform} —Å —Ä–æ–ª—è–º–∏: {role}. "
        f"–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—Å—è."
    )
    return ConversationHandler.END

def find_matching_requests(update, context):
    if not teammate_requests:
        update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∏—Å–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤.")
        return

    user_data = context.user_data
    if not user_data:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /find_teammates.")
        return

    matches = []
    for user_id, request_data in teammate_requests.items():
        if user_id != update.message.from_user.id and \
           request_data['game'].lower() == user_data['game'].lower() and \
           request_data['platform'].lower() == user_data['platform'].lower():
            matches.append(user_id)

    if matches:
        matched_user_id = random.choice(matches)
        matched_user = context.bot.get_chat(matched_user_id)
        update.message.reply_text(
            f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –Ω–∞–ø–∞—Ä–Ω–∏–∫! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{matched_user.username} –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏."
        )
    else:
        update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")

def cancel_find_teammates(update, context):
    update.message.reply_text("–ü–æ–∏—Å–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

def find_guide(update, context):
    game_name = ' '.join(context.args)
    if not game_name:
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≥–∞–π–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: /guide Dota 2")
        return

    if game_name in guides:
        guides_list = "\n- ".join(guides[game_name])
        update.message.reply_text(f"üìö –ì–∞–π–¥—ã –¥–ª—è –∏–≥—Ä—ã '{game_name}':\n- {guides_list}")
    else:
        update.message.reply_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–∞–π–¥—ã –¥–ª—è –∏–≥—Ä—ã '{game_name}' –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

def start(update, context):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–π–º–µ—Ä–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/news - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "/find_teammates - –ù–∞–π—Ç–∏ —Å–æ–ø–∞—Ä—Ç–∏–π—Ü–µ–≤ –¥–ª—è –∏–≥—Ä—ã\n"
        "/find - –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤\n"
        "/guide [–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã] - –ù–∞–π—Ç–∏ –≥–∞–π–¥—ã –ø–æ –∏–≥—Ä–µ"
    )

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("news", get_game_news))

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('find_teammates', find_teammates_start)],
        states={
            GAME: [MessageHandler(Filters.text & ~Filters.command, game_input)],
            PLATFORM: [MessageHandler(Filters.text & ~Filters.command, platform_input)],
            ROLE: [MessageHandler(Filters.text & ~Filters.command, role_input)],
        },
        fallbacks=[CommandHandler('cancel', cancel_find_teammates)]
    )
    dp.add_handler(conv_handler)
    dp.add_handler(CommandHandler("find", find_matching_requests))
    dp.add_handler(CommandHandler("guide", find_guide))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()